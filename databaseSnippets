# Number of cans by course and day
r.db('help').table('trashCans').group([
  r.row('departmentSlug'),
  r.row('courseSlug'),
  r.row('created').date()
]).count();
# ordered by date
r.db('help').table('trashCans').group(
  (can) => {
    return {
      departmentSlug: can('departmentSlug'), 
      courseSlug: can('courseSlug'), 
      date: can('created').date()
    }
  }  
).count().ungroup().orderBy(r.desc(r.row('group')('date')));
# number of cans per course per semester with more than 12 cans (remove small tests)
r.db('help').table('trashCans').group(
  (can) => {
    return {
      departmentSlug: can('departmentSlug'),
      courseSlug: can('courseSlug'),
        year: can('created').year(),
        spring: can('created').month().lt(8)
    }
  }
).count().ungroup().filter(r.row("reduction").gt(12)).orderBy(r.desc(r.row('group')('year')), r.asc(r.row('group')('spring')), r.desc('reduction'));



# Average response time 
r.db('help').table('trashCans').filter(
  (can) => {
    return can('retractedBy').ne('student')
})
.withFields(['retractedAt', 'created'])
  .map((can) => {
    return can('retractedAt').sub(can('created'))
})
.avg();

# average response time per course per day
r.db('help').table('trashCans').group([
  r.row('departmentSlug'),
  r.row('courseSlug'),
  r.row('created').date()
]).filter(
  (can) => {
    return can('retractedBy').ne('student')
})
.withFields(['retractedAt', 'created'])
  .map((can) => {
    return can('retractedAt').sub(can('created'))
})
.avg();

# Courses with user objects instead of userIDs
r.db('help').table('courses').merge(
  (u) => {
    return {associatedUsers: u('associatedUserIDs').map(
      (id) => r.db('help').table('users').get(id).without('anon')) 
    }
  }
).without('associatedUserIDs')